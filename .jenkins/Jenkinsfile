pipeline {
  agent {
    label 'bazel-build-28'
  }
  environment {
    scmInfo = checkout scm
    gitBranch = scmInfo.GIT_BRANCH.replace("origin/", "")
  }
  stages {
    stage('Restore cache') {
      steps {
        sh 'gsutil cp gs://ajf-bazel-build-cache/ajf-node-modules.tar.gz .'
        sh 'tar xfz ajf-node-modules.tar.gz'
        sh 'rm ajf-node-modules.tar.gz'
        sh 'gsutil cp gs://ajf-bazel-build-cache/ajf-bazel-repository.tar.gz .'
        sh 'tar xfz ajf-bazel-repository.tar.gz -C /home/jenkins'
        sh 'rm ajf-bazel-repository.tar.gz'
        sh 'cat .jenkins/bazelrc >> .bazelrc'
      }
    }
    stage('Setup') {
      steps {
        sh 'yarn install'
      }
    }
    stage('Lint') {
      steps {
        sh 'yarn -s lint'
      }
    }
    stage('Build') {
      steps {
        sh 'bazel build src/... --build_tag_filters=-docs-package'
      }
    }
    stage('Unit tests') {
      steps {
        sh 'bazel test src/... --build_tag_filters=-e2e --test_tag_filters=-e2e'
      }
    }
    stage('API guard tests') {
      steps {
        sh 'bazel test tools/public_api_guard/...'
      }
    }
    stage('Integration tests') {
      steps {
        sh 'bazel test src/... --build_tag_filters=e2e --test_tag_filters=e2e'
        sh 'yarn gulp ci:prerender'
      }
    }
    stage('Release output') {
      steps {
        sh 'yarn gulp ci:build-release-packages'
        sh 'yarn check-release-output'
        sh 'yarn gulp ci:aot'
      }
    }
    stage('Save cache') {
      steps {
        sh 'tar cfz ajf-node-modules.tar.gz node_modules'
        sh 'gsutil cp ajf-node-modules.tar.gz gs://ajf-bazel-build-cache/'
        sh 'rm ajf-node-modules.tar.gz'
        sh 'tar cfz ajf-bazel-repository.tar.gz -C /home/jenkins bazel_repository_cache'
        sh 'gsutil cp ajf-bazel-repository.tar.gz gs://ajf-bazel-build-cache/'
        sh 'rm ajf-bazel-repository.tar.gz'
      }
    }
    stage('Publish snapshots') {
      when {
        expression {
          return gitBranch == 'master'
        }
      }
      steps {
        sh './scripts/circleci/publish-snapshots.sh'
        sh './scripts/deploy/deploy-dev-apps.sh'
      }
    }
  }
}
